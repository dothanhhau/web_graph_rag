# Prompt đánh giá tìm kiếm lần 1
CYPHER_GENERATION_TEMPLATE = """
Task: Sinh truy vấn Cypher để truy xuất dữ liệu từ đồ thị tri thức về quy chế đào tạo đại học.

Instructions:
- Phân tích kỹ câu hỏi và trích xuất các thành phần quan trọng như thực thể (node), quan hệ (edge) và thuộc tính (property).
- Chỉ sử dụng các loại node, quan hệ và thuộc tính có trong schema bên dưới. Không thêm bất kỳ phần tử nào không có trong schema.
- Các nhãn node được đặt bằng tiếng Việt (ví dụ: :Chương_trình, :Chủ_thể, :Học, :Quy_định...).
- Các nhãn quan hệ được đặt bằng tiếng Việt (ví dụ: :ÁP_DỤNG, :HỌC, :QUY_ĐỊNH...).
- Truy vấn phải trả lời chính xác câu hỏi dựa trên cấu trúc đồ thị.
- Chỉ trả về truy vấn Cypher. Không viết giải thích, ghi chú, hoặc định nghĩa gì thêm.

Schema đồ thị:
{schema}

Ví dụ truy vấn:

# Các phương thức đóng học phí bao gồm các phương thức nào?
# Cách 1
MATCH (n:`Hoạt_động`)-[]->(m)
WHERE n.id contains 'Phương Thức Đóng Học Phí'
return n, m
# Cách 2
MATCH (n:`Phương_thức`)-[:`ÁP_DỤNG_CHO`]->(m)
WHERE m.id contains 'Sinh Viên'
return n.id

# Học phần bắt buộc là gì?
MATCH (n: Loại_học_phần)
WHERE n.id contains 'Học Phần Bắt Buộc'
return n.`định_nghĩa`

# Khi nào sinh viên bị buộc thôi học?
MATCH (n: Chủ_thể)-[:`CÓ_HÀNH_VI`]->(m)-[:`BỊ_XỬ_LÝ`]->(x)
WHERE n.id contains 'Sinh Viên' 
AND x.id contains 'Buộc Thôi Học'
return n, m, x

# Thời hạn đóng học phí là khi nào?
MATCH (n:`Chủ_thể`)-[r1:`PHẢI_TUÂN_THỦ`]->(m)-[r2]->(x)
where n.id contains 'Sinh Viên' 
and m.id contains 'Thời Hạn Đóng Học Phí'
RETURN n, r1, m, r2, x 

The question is:
{question}
"""

----------------------------------------------------------------------------------------------------------------------------------------------

# Prompt đánh giá tìm kiếm lần 2
CYPHER_GENERATION_TEMPLATE = """
Task: Sinh truy vấn Cypher để truy xuất dữ liệu từ đồ thị tri thức về quy chế đào tạo đại học.

Instructions:
- Phân tích kỹ câu hỏi và xác định các thành phần quan trọng như thực thể (node), quan hệ (edge), và thuộc tính (property).
- Chỉ sử dụng các loại node, quan hệ và thuộc tính có trong schema bên dưới. Không thêm bất kỳ phần tử nào không có trong schema.
- Các nhãn node được đặt bằng tiếng Việt (ví dụ: :Chương_trình, :Chủ_thể, :Học, :Quy_định...).
- Các loại quan hệ cũng được đặt bằng tiếng Việt (ví dụ: :ÁP_DỤNG, :HỌC, :QUY_ĐỊNH...).
- Mọi truy vấn **phải trả về đầy đủ tất cả thuộc tính** của node và relationship bằng `properties(...)`. Nếu cần, sử dụng `type(...)` để lấy tên quan hệ.
- **Chỉ được sử dụng phép so sánh `CONTAINS` trong mệnh đề WHERE. Không được sử dụng phép gán bằng (`=`).**
- Luôn sử dụng `OPTIONAL MATCH` thay vì `MATCH`, kể cả khi chỉ có một thực thể, để đảm bảo không bỏ sót dữ liệu khi không có quan hệ liên kết.
- Nếu có nhiều phần cần truy vấn:
  - **Phải gộp tất cả truy vấn lại bằng `UNION`** để tránh lỗi cú pháp.
  - Các truy vấn trong `UNION` **phải trả về cùng danh sách cột và tên cột**, nếu không có giá trị thì dùng `NULL` để thay thế.
- Không viết lời giải thích, ghi chú hoặc định nghĩa. Chỉ trả về truy vấn Cypher.

Schema đồ thị:
{schema}

Ví dụ truy vấn:

# Các phương thức đóng học phí bao gồm các phương thức nào?
MATCH (n:`Hoạt_động`)-[r]->(m)
WHERE n.id CONTAINS 'Phương Thức Đóng Học Phí'
RETURN 
  properties(n) AS n_properties, 
  type(r) AS r_type, 
  properties(r) AS r_properties, 
  properties(m) AS m_properties

# Học phần bắt buộc là gì?
MATCH (n:Loại_học_phần)
WHERE n.id CONTAINS 'Học Phần Bắt Buộc'
RETURN properties(n) AS n_properties

# Các quy định và yêu cầu liên quan đến điều kiện tốt nghiệp?
MATCH (n:`Khái_niệm`)
WHERE n.id CONTAINS 'Tốt Nghiệp' OR n.điều_kiện CONTAINS 'tốt nghiệp'
OPTIONAL MATCH (n)-[r1]->(m)
RETURN 
  properties(n) AS n_properties, 
  type(r1) AS r1_type, 
  properties(r1) AS r1_properties, 
  properties(m) AS m_properties

UNION

MATCH (n:`Yêu_cầu`)
WHERE n.id CONTAINS 'Tốt Nghiệp'
OPTIONAL MATCH (n)-[r2]->(m)
RETURN 
  properties(n) AS n_properties, 
  type(r2) AS r2_type, 
  properties(r2) AS r2_properties, 
  properties(m) AS m_properties

The question is:
{question}
"""

----------------------------------------------------------------------------------------------------------------------------------------------

# Prompt đánh giá tìm kiếm lần 3
CYPHER_GENERATION_TEMPLATE = """
Task: Sinh truy vấn Cypher để truy xuất dữ liệu từ đồ thị tri thức.

Instructions:
- Phân tích kỹ câu hỏi và xác định các thành phần quan trọng như thực thể (node), quan hệ (edge), và thuộc tính (property).
- Chỉ sử dụng các loại node, quan hệ và thuộc tính có trong schema bên dưới. Không thêm bất kỳ phần tử nào không có trong schema.
- Các nhãn node được đặt bằng tiếng Việt (ví dụ: :Chương_trình, :Chủ_thể, :Học, :Quy_định...).
- Các loại quan hệ cũng được đặt bằng tiếng Việt (ví dụ: :ÁP_DỤNG, :HỌC, :QUY_ĐỊNH...).
- Mọi truy vấn **phải trả về đầy đủ tất cả thuộc tính** của node và relationship bằng `properties(...)`. Nếu cần, sử dụng `type(...)` để lấy tên quan hệ.
- **Chỉ được sử dụng phép so sánh `CONTAINS` trong mệnh đề WHERE. Không được sử dụng phép gán bằng (`=`).**
- Khi cần truy vấn nhiều mẫu (nhiều thực thể và quan hệ khác nhau), hãy dùng nhiều câu `OPTIONAL MATCH` tách riêng, sau đó gom kết quả lại bằng `collect(...)` và chỉ viết một câu `RETURN` duy nhất ở cuối.
- Không viết nhiều câu `OPTIONAL MATCH ... RETURN` liên tiếp. Luôn gom kết quả lại để trả về một lần duy nhất.
- Không viết nhiều truy vấn MATCH...RETURN liên tiếp mà không tách bằng dòng trắng hoặc dùng `UNION`.
- Không sử dụng `UNION` nếu có thể gộp các mẫu bằng `OPTIONAL MATCH`.
- Không viết lời giải thích, ghi chú hoặc định nghĩa. Chỉ trả về truy vấn Cypher.

Schema đồ thị:
{schema}

Ví dụ truy vấn:

# Các phương thức đóng học phí bao gồm các phương thức nào?
OPTIONAL MATCH (n)-[r]->(m)
WHERE n.id CONTAINS 'Phương Thức Đóng Học Phí'
RETURN 
  properties(n) AS n_properties, 
  type(r) AS r_type, 
  properties(r) AS r_properties, 
  properties(m) AS m_properties

# Học phần bắt buộc là gì?
OPTIONAL MATCH (n)
WHERE n.id CONTAINS 'Học Phần Bắt Buộc'
RETURN properties(n) AS n_properties

# Khi nào sinh viên bị buộc thôi học?
OPTIONAL MATCH (n)-[r1:`BỊ_BUỘC_THÔI_HỌC`]->(m)
WHERE n.id CONTAINS 'Sinh Viên'
RETURN 
  properties(n) AS n_properties, 
  type(r1) AS r1_type, 
  properties(r1) AS r1_properties,
  properties(m) AS m_properties

# Khối lượng học tập của các ngành là bao nhiêu?
OPTIONAL MATCH (n)
WHERE n.id CONTAINS 'Khối Lượng Học Tập'

OPTIONAL MATCH (n2:Ngành_đào_tạo)-[r]->(m)
WHERE m.id CONTAINS 'Khối Lượng Học Tập'

RETURN 
  collect(DISTINCT properties(n)) AS khái_niệm,
  collect(DISTINCT properties(n2)) AS ngành_đào_tạo,
  collect(DISTINCT type(r)) AS loại_quan_hệ,
  collect(DISTINCT properties(r)) AS thuộc_tính_quan_hệ,
  collect(DISTINCT properties(m)) AS khái_niệm_liên_quan

The question is:
{question}
"""

----------------------------------------------------------------------------------------------------------------------------------------------

# Prompt đánh giá tìm kiếm lần 4
CYPHER_GENERATION_TEMPLATE = """
Task: Sinh truy vấn Cypher để truy xuất dữ liệu từ đồ thị tri thức.

Instructions:
- Phân tích kỹ câu hỏi và xác định các thành phần quan trọng như thực thể (node), quan hệ (edge), và thuộc tính (property).
- Chỉ sử dụng các loại node, quan hệ và thuộc tính có trong schema bên dưới. Không thêm bất kỳ phần tử nào không có trong schema.
- Không sử dụng nhãn node trong MATCH (chỉ viết OPTIONAL MATCH (n), không OPTIONAL MATCH (n:Label)).
- Các loại quan hệ được đặt bằng tiếng Việt (ví dụ: :ÁP_DỤNG, :HỌC, :QUY_ĐỊNH...).
- Tất cả truy vấn đều phải dùng `OPTIONAL MATCH`. Không sử dụng `MATCH`.

- Mọi truy vấn **phải trả về đầy đủ tất cả thuộc tính** của node và relationship bằng `properties(...)`. Nếu cần, sử dụng `type(...)` để lấy tên quan hệ.
- **Chỉ được sử dụng phép so sánh `CONTAINS` trong mệnh đề WHERE, và luôn sử dụng `toLower(...)` ở cả hai vế.**
  Ví dụ: `toLower(n.id) CONTAINS toLower('từ khóa')`

- Nếu câu hỏi chỉ yêu cầu thông tin về một khái niệm hoặc thực thể đơn lẻ → sử dụng mẫu:
  `OPTIONAL MATCH (n) WHERE ...`
- Nếu câu hỏi yêu cầu mối liên hệ hoặc dữ kiện liên quan giữa các khái niệm → sử dụng mẫu:
  `OPTIONAL MATCH (n)-[r]-(m) WHERE ...`

- Khi cần truy vấn nhiều mẫu (nhiều thực thể và quan hệ khác nhau), hãy dùng nhiều câu `OPTIONAL MATCH` tách riêng, sau đó gom kết quả lại bằng `collect(...)` và chỉ viết một câu `RETURN` duy nhất ở cuối.
- Không sử dụng `UNION` trong bất kỳ trường hợp nào.
- Không viết nhiều câu `OPTIONAL MATCH...RETURN` liên tiếp. Luôn gom kết quả lại để trả về một lần duy nhất bằng một câu `RETURN`.
- Không viết lời giải thích, ghi chú hoặc định nghĩa. Chỉ trả về truy vấn Cypher.

Schema đồ thị:
{schema}

Ví dụ truy vấn:

# Các phương thức đóng học phí bao gồm các phương thức nào?
OPTIONAL MATCH (n)-[r]->(m)
WHERE toLower(n.id) CONTAINS toLower('Phương Thức Đóng Học Phí')

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r)) AS r_type, 
  collect(DISTINCT properties(r)) AS r_properties, 
  collect(DISTINCT properties(m)) AS m_properties

# Học phần bắt buộc là gì?
OPTIONAL MATCH (n)
WHERE toLower(n.id) CONTAINS toLower('Học Phần Bắt Buộc')

RETURN collect(DISTINCT properties(n)) AS n_properties

# Khi nào sinh viên bị buộc thôi học?
OPTIONAL MATCH (n)-[r1]->(m)
WHERE toLower(n.id) CONTAINS toLower('Sinh Viên') AND type(r1) = 'BỊ_BUỘC_THÔI_HỌC'

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r1)) AS r1_type, 
  collect(DISTINCT properties(r1)) AS r1_properties,
  collect(DISTINCT properties(m)) AS m_properties

# Khối lượng học tập của các ngành là bao nhiêu?
OPTIONAL MATCH (n)
WHERE toLower(n.id) CONTAINS toLower('Khối Lượng Học Tập')

OPTIONAL MATCH (n2)-[r]->(m)
WHERE toLower(m.id) CONTAINS toLower('Khối Lượng Học Tập')

RETURN 
  collect(DISTINCT properties(n)) AS khái_niệm,
  collect(DISTINCT properties(n2)) AS ngành_đào_tạo,
  collect(DISTINCT type(r)) AS loại_quan_hệ,
  collect(DISTINCT properties(r)) AS thuộc_tính_quan_hệ,
  collect(DISTINCT properties(m)) AS khái_niệm_liên_quan

# Những quy định liên quan đến điều kiện tốt nghiệp là gì?
OPTIONAL MATCH (n)-[r]-(m)
WHERE toLower(n.id) CONTAINS toLower('Điều Kiện Tốt Nghiệp')

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r)) AS r_type, 
  collect(DISTINCT properties(r)) AS r_properties, 
  collect(DISTINCT properties(m)) AS m_properties

The question is:
{question}
"""



prompt khắc phục câu hỏi không liên quan

CYPHER_GENERATION_TEMPLATE = """
Task: Sinh truy vấn Cypher để truy xuất dữ liệu từ đồ thị tri thức.

Instructions:
- Phân tích kỹ câu hỏi và xác định các thành phần quan trọng như thực thể (node), quan hệ (edge), và thuộc tính (property).
- Chỉ sử dụng các loại node, quan hệ và thuộc tính có trong schema bên dưới. Không thêm bất kỳ phần tử nào không có trong schema.
- Không sử dụng nhãn node trong MATCH (chỉ viết OPTIONAL MATCH (n), không OPTIONAL MATCH (n:Label)).
- Các loại quan hệ được đặt bằng tiếng Việt (ví dụ: :ÁP_DỤNG, :HỌC, :QUY_ĐỊNH...).
- Tất cả truy vấn đều phải dùng `OPTIONAL MATCH`. Không sử dụng `MATCH`.

- Mọi truy vấn **phải trả về đầy đủ tất cả thuộc tính** của node và relationship bằng `properties(...)`. Nếu cần, sử dụng `type(...)` để lấy tên quan hệ.
- **Chỉ được sử dụng phép so sánh `CONTAINS` trong mệnh đề WHERE, và luôn sử dụng `toLower(...)` ở cả hai vế.**
  Ví dụ: `toLower(n.id) CONTAINS toLower('từ khóa')`

- Nếu câu hỏi chỉ yêu cầu thông tin về một khái niệm hoặc thực thể đơn lẻ → sử dụng mẫu:
  `OPTIONAL MATCH (n) WHERE ...`
- Nếu câu hỏi yêu cầu mối liên hệ hoặc dữ kiện liên quan giữa các khái niệm → sử dụng mẫu:
  `OPTIONAL MATCH (n)-[r]-(m) WHERE ...`

- Khi cần truy vấn nhiều mẫu (nhiều thực thể và quan hệ khác nhau), hãy dùng nhiều câu `OPTIONAL MATCH` tách riêng, sau đó gom kết quả lại bằng `collect(...)` và chỉ viết một câu `RETURN` duy nhất ở cuối.
- Không sử dụng `UNION` trong bất kỳ trường hợp nào.
- Không viết nhiều câu `OPTIONAL MATCH...RETURN` liên tiếp. Luôn gom kết quả lại để trả về một lần duy nhất bằng một câu `RETURN`.
- Không viết lời giải thích, ghi chú hoặc định nghĩa. Chỉ trả về truy vấn Cypher.

❗ Nếu không xác định được thực thể, quan hệ hoặc thuộc tính nào trong schema liên quan đến câu hỏi → KHÔNG sinh truy vấn. Trả về dòng:
`// Câu hỏi không đủ rõ hoặc không liên quan đến schema nên không thể sinh truy vấn.`

Schema đồ thị:
{schema}

Ví dụ truy vấn:

# Các phương thức đóng học phí bao gồm các phương thức nào?
OPTIONAL MATCH (n)-[r]->(m)
WHERE toLower(n.id) CONTAINS toLower('Phương Thức Đóng Học Phí')

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r)) AS r_type, 
  collect(DISTINCT properties(r)) AS r_properties, 
  collect(DISTINCT properties(m)) AS m_properties

# Học phần bắt buộc là gì?
OPTIONAL MATCH (n)
WHERE toLower(n.id) CONTAINS toLower('Học Phần Bắt Buộc')

RETURN collect(DISTINCT properties(n)) AS n_properties

# Khi nào sinh viên bị buộc thôi học?
OPTIONAL MATCH (n)-[r1]->(m)
WHERE toLower(n.id) CONTAINS toLower('Sinh Viên') AND type(r1) = 'BỊ_BUỘC_THÔI_HỌC'

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r1)) AS r1_type, 
  collect(DISTINCT properties(r1)) AS r1_properties,
  collect(DISTINCT properties(m)) AS m_properties

# Khối lượng học tập của các ngành là bao nhiêu?
OPTIONAL MATCH (n)
WHERE toLower(n.id) CONTAINS toLower('Khối Lượng Học Tập')

OPTIONAL MATCH (n2)-[r]->(m)
WHERE toLower(m.id) CONTAINS toLower('Khối Lượng Học Tập')

RETURN 
  collect(DISTINCT properties(n)) AS khái_niệm,
  collect(DISTINCT properties(n2)) AS ngành_đào_tạo,
  collect(DISTINCT type(r)) AS loại_quan_hệ,
  collect(DISTINCT properties(r)) AS thuộc_tính_quan_hệ,
  collect(DISTINCT properties(m)) AS khái_niệm_liên_quan

# Những quy định liên quan đến điều kiện tốt nghiệp là gì?
OPTIONAL MATCH (n)-[r]-(m)
WHERE toLower(n.id) CONTAINS toLower('Điều Kiện Tốt Nghiệp')

RETURN 
  collect(DISTINCT properties(n)) AS n_properties, 
  collect(DISTINCT type(r)) AS r_type, 
  collect(DISTINCT properties(r)) AS r_properties, 
  collect(DISTINCT properties(m)) AS m_properties

The question is:
{question}
"""





- **Nếu có nhiều điều kiện so sánh (nhiều từ khóa), hãy kết hợp chúng bằng phép `OR`, không dùng `AND`.**
  Ví dụ: `toLower(n.name) CONTAINS toLower('abc') OR toLower(n.name) CONTAINS toLower('xyz')`